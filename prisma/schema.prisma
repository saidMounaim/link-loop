// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String @id
  expiresAt DateTime
  token     String @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String @id
  name          String
  email         String @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  account       Account[]
  session       Session[]
  profiles      Profile[]
}

model Verification {
  id         String @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Profile {
  id        String   @id @default(cuid())
  name      String
  username  String   @unique
  avatar    String?
  bio       String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  links     Link[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Link {
  id        String   @id @default(cuid())
  profileId String
  title     String
  url       String
  emoji     String?
  clicks    Int      @default(0)
  order     Int      @default(0)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}